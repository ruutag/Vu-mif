{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import time\n",
    "from datetime import datetime\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from tensorflow.keras.callbacks import TensorBoard"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "import tensorflow.keras as keras\n",
    "from tensorflow.keras.layers import Dense, Input, Flatten, Conv2D, BatchNormalization, Activation, Dropout, MaxPooling2D\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.optimizers import Adam, SGD"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "import gzip\n",
    "import pickle\n",
    "\n",
    "X,y = pickle.load(gzip.open('flatland_train.data','rb'))\n",
    "y[y != 0] -= 2\n",
    "X = X.reshape(X.shape[0], 50, 50, 1) / 255.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential_5\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "conv2d_10 (Conv2D)           (None, 48, 48, 32)        320       \n",
      "_________________________________________________________________\n",
      "batch_normalization_10 (Batc (None, 48, 48, 32)        128       \n",
      "_________________________________________________________________\n",
      "conv2d_11 (Conv2D)           (None, 46, 46, 32)        9248      \n",
      "_________________________________________________________________\n",
      "batch_normalization_11 (Batc (None, 46, 46, 32)        128       \n",
      "_________________________________________________________________\n",
      "max_pooling2d_5 (MaxPooling2 (None, 23, 23, 32)        0         \n",
      "_________________________________________________________________\n",
      "flatten_5 (Flatten)          (None, 16928)             0         \n",
      "_________________________________________________________________\n",
      "dense_15 (Dense)             (None, 72)                1218888   \n",
      "_________________________________________________________________\n",
      "dense_16 (Dense)             (None, 8)                 584       \n",
      "_________________________________________________________________\n",
      "dense_17 (Dense)             (None, 5)                 45        \n",
      "=================================================================\n",
      "Total params: 1,229,341\n",
      "Trainable params: 1,229,213\n",
      "Non-trainable params: 128\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "NAME = \"BBB\" \n",
    "model = Sequential()\n",
    "model.add(Conv2D(32,activation='relu', kernel_size=(3, 3), input_shape=[50, 50, 1]))\n",
    "model.add(BatchNormalization(axis=-1))   # Axis -1 is always the features axis\n",
    "model.add(Conv2D(32, (3, 3), activation='relu'))\n",
    "model.add(BatchNormalization(axis=-1))\n",
    "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "\n",
    "#model.add(BatchNormalization(axis=-1))\n",
    "model.add(Flatten())\n",
    "model.add(Dense(72, activation='relu'))\n",
    "model.add(Dense(8, activation='relu'))\n",
    "#model.add(Dropout(0.2))\n",
    "model.add(Dense(5, activation='softmax'))\n",
    "\n",
    "model.compile(loss=\"sparse_categorical_crossentropy\",\n",
    "              optimizer=keras.optimizers.Adam(lr=3e-4),\n",
    "              metrics=[\"accuracy\"])\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/29\n",
      "250/250 [==============================] - 19s 74ms/step - loss: 1.5974 - accuracy: 0.2080 - val_loss: 3.2049 - val_accuracy: 0.1700\n",
      "Epoch 2/29\n",
      "250/250 [==============================] - 18s 74ms/step - loss: 1.4109 - accuracy: 0.3511 - val_loss: 1.8978 - val_accuracy: 0.1785\n",
      "Epoch 3/29\n",
      "250/250 [==============================] - 18s 74ms/step - loss: 1.2087 - accuracy: 0.4787 - val_loss: 1.1646 - val_accuracy: 0.4615\n",
      "Epoch 4/29\n",
      "250/250 [==============================] - 18s 74ms/step - loss: 1.0828 - accuracy: 0.5893 - val_loss: 1.2588 - val_accuracy: 0.5155\n",
      "Epoch 5/29\n",
      "250/250 [==============================] - 19s 75ms/step - loss: 0.9306 - accuracy: 0.6640 - val_loss: 0.9707 - val_accuracy: 0.6155\n",
      "Epoch 6/29\n",
      "250/250 [==============================] - 19s 75ms/step - loss: 0.6413 - accuracy: 0.6930 - val_loss: 1.3102 - val_accuracy: 0.4975\n",
      "Epoch 7/29\n",
      "250/250 [==============================] - 18s 74ms/step - loss: 0.5189 - accuracy: 0.7181 - val_loss: 0.5406 - val_accuracy: 0.7965\n",
      "Epoch 8/29\n",
      "250/250 [==============================] - 18s 74ms/step - loss: 0.4609 - accuracy: 0.8141 - val_loss: 0.5106 - val_accuracy: 0.8015\n",
      "Epoch 9/29\n",
      "250/250 [==============================] - 19s 75ms/step - loss: 0.4311 - accuracy: 0.8305 - val_loss: 0.4979 - val_accuracy: 0.7820\n",
      "Epoch 10/29\n",
      "250/250 [==============================] - 19s 74ms/step - loss: 0.3956 - accuracy: 0.8478 - val_loss: 0.4999 - val_accuracy: 0.7795\n",
      "Epoch 11/29\n",
      "250/250 [==============================] - 18s 74ms/step - loss: 0.3470 - accuracy: 0.8618 - val_loss: 0.4150 - val_accuracy: 0.8360\n",
      "Epoch 12/29\n",
      "250/250 [==============================] - 18s 74ms/step - loss: 0.3051 - accuracy: 0.8775 - val_loss: 0.4147 - val_accuracy: 0.8595\n",
      "Epoch 13/29\n",
      "250/250 [==============================] - 19s 74ms/step - loss: 0.2482 - accuracy: 0.8835 - val_loss: 0.4297 - val_accuracy: 0.8675\n",
      "Epoch 14/29\n",
      "250/250 [==============================] - 18s 74ms/step - loss: 0.2034 - accuracy: 0.9069 - val_loss: 0.2481 - val_accuracy: 0.8960\n",
      "Epoch 15/29\n",
      "250/250 [==============================] - 18s 74ms/step - loss: 0.1873 - accuracy: 0.9251 - val_loss: 0.2418 - val_accuracy: 0.8755\n",
      "Epoch 16/29\n",
      "250/250 [==============================] - 18s 74ms/step - loss: 0.1558 - accuracy: 0.9480 - val_loss: 0.2978 - val_accuracy: 0.9115\n",
      "Epoch 17/29\n",
      "250/250 [==============================] - 18s 74ms/step - loss: 0.1171 - accuracy: 0.9661 - val_loss: 0.1807 - val_accuracy: 0.9250\n",
      "Epoch 18/29\n",
      "250/250 [==============================] - 18s 74ms/step - loss: 0.0792 - accuracy: 0.9750 - val_loss: 0.1447 - val_accuracy: 0.9510\n",
      "Epoch 19/29\n",
      "250/250 [==============================] - 19s 74ms/step - loss: 0.0363 - accuracy: 0.9895 - val_loss: 0.1023 - val_accuracy: 0.9700\n",
      "Epoch 20/29\n",
      "250/250 [==============================] - 19s 75ms/step - loss: 0.0121 - accuracy: 0.9980 - val_loss: 0.0819 - val_accuracy: 0.9730\n",
      "Epoch 21/29\n",
      "250/250 [==============================] - 18s 74ms/step - loss: 0.0058 - accuracy: 0.9989 - val_loss: 0.0711 - val_accuracy: 0.9755\n",
      "Epoch 22/29\n",
      "250/250 [==============================] - 19s 74ms/step - loss: 0.0031 - accuracy: 0.9998 - val_loss: 0.0688 - val_accuracy: 0.9780\n",
      "Epoch 23/29\n",
      "250/250 [==============================] - 19s 76ms/step - loss: 0.0021 - accuracy: 0.9998 - val_loss: 0.0670 - val_accuracy: 0.9790\n",
      "Epoch 24/29\n",
      "250/250 [==============================] - 19s 76ms/step - loss: 0.0016 - accuracy: 0.9998 - val_loss: 0.0579 - val_accuracy: 0.9815\n",
      "Epoch 25/29\n",
      "250/250 [==============================] - 19s 76ms/step - loss: 9.2405e-04 - accuracy: 0.9999 - val_loss: 0.0560 - val_accuracy: 0.9810\n",
      "Epoch 26/29\n",
      "250/250 [==============================] - 19s 76ms/step - loss: 8.0279e-04 - accuracy: 0.9999 - val_loss: 0.0563 - val_accuracy: 0.9825\n",
      "Epoch 27/29\n",
      "250/250 [==============================] - 19s 74ms/step - loss: 6.7341e-04 - accuracy: 0.9999 - val_loss: 0.0573 - val_accuracy: 0.9825\n",
      "Epoch 28/29\n",
      "250/250 [==============================] - 19s 74ms/step - loss: 5.5941e-04 - accuracy: 0.9999 - val_loss: 0.0572 - val_accuracy: 0.9820\n",
      "Epoch 29/29\n",
      "250/250 [==============================] - 19s 74ms/step - loss: 5.2435e-04 - accuracy: 0.9999 - val_loss: 0.0580 - val_accuracy: 0.9825\n"
     ]
    }
   ],
   "source": [
    "tensorboard = TensorBoard(log_dir=\"logs/{}\".format(NAME))\n",
    "loss = model.fit(X, y, epochs=29, validation_split=0.2, callbacks=tensorboard)#padariau epochas didesnes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f03e80f5b70>"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pd.DataFrame(loss.history).plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy on test set - 99.64%\n"
     ]
    }
   ],
   "source": [
    "pred = model.predict(X).argmax(axis=1)\n",
    "print('Accuracy on test set - {0:.02%}'.format((pred == y).mean()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "model.save('Flatlan.h5')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "import gzip\n",
    "import pickle\n",
    "\n",
    "def evaluate(path, model):\n",
    "    X, y = pickle.load(gzip.open(path, 'rb'))\n",
    "    y[y != 0] -= 2\n",
    "    X = X / 255.\n",
    "    acc = np.mean(model(X).batch(32).numpy().argmax(axis=1) == y)\n",
    "    return acc\n",
    "\n",
    "model = keras.models.load_model('Flatland.h5')\n",
    "evaluate('flatland_train.data', model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
